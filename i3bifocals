#!/usr/bin/python3

import sys
import json
import asyncio
from i3ipc.aio import Connection
from i3ipc import Event


LAYOUTS = {
    "splith": "H",
    "splitv": "V",
    "tabbed": "T",
    "stacked": "S",
}

def con_path(con):
    if con is None or con.type == "workspace":
        return []
    else:
        return con_path(con.parent) + [LAYOUTS.get(con.layout, "?") if con.nodes else con.name]

def con_name_with_path(con):
    if con.type == "workspace":
        return f"<workspace {con.name}>"
    else:
        *path, leaf = con_path(con)
        if path:
            return f"{'/'.join(path)}: {leaf}"
        else:
            return leaf


class i3Bifocals:
    def __init__(self):
        self.status = []

    async def print_status(self):
        tree = await self.i3.get_tree()
        focused = tree.find_focused()
        focus_block = {
            "name": "focused_con",
            "full_text": con_name_with_path(focused),
        }
        blocks = [focus_block, *self.status]
        print(json.dumps(blocks) + ",", flush=True)

    async def handle_binding_event(self, i3, event):
        cmd = event.binding.command.split()
        if cmd[0] in ("split", "layout"):
            await self.print_status()

    async def handle_workspace_event(self, i3, event):
        if event.current.find_focused() is None:
            await self.print_status()

    async def handle_window_event(self, i3, event):
        change = event.change
        con = event.container
        if change == "focus" or change == "close" or con.focused and change == "title":
            await self.print_status()

    async def subscribe_i3_events(self):
        self.i3 = await Connection().connect()

        # unfortunately, if layout is modified by something other than a
        # binding, we will not be notified, and will not know until
        # another event or the next i3status tick. perhaps a "layout"
        # event type could be added to the IPC spec.
        self.i3.on(Event.BINDING, self.handle_binding_event)
        self.i3.on(Event.WORKSPACE_FOCUS, self.handle_workspace_event)
        for event_type in (Event.WINDOW_FOCUS, Event.WINDOW_TITLE, Event.WINDOW_CLOSE):
            self.i3.on(event_type, self.handle_window_event)

    async def exec_i3status(self, argv):
        i3status = await asyncio.create_subprocess_exec(*argv, stdout=asyncio.subprocess.PIPE)

        # our input and output must start with two very specific things
        # (see: https://i3wm.org/docs/i3bar-protocol.html).

        print(json.dumps({"version": 1}))
        print("[")

        # verify that i3status sent the same header to us.

        try:
            header = json.loads(await i3status.stdout.readline())
            assert header["version"] == 1
        except (json.decoder.JSONDecodeError, ValueError):
            print("could not parse JSON header from i3status! exiting.", file=sys.stderr)
            sys.exit(1)
        except AssertionError:
            print("got an unknown i3bar protocol version! exiting.", file=sys.stderr)
            sys.exit(1)

        array_start = await i3status.stdout.read(1)
        if array_start != b"[":
            print("did not read a body from i3status! exiting.", file=sys.stderr)
            sys.exit(1)

        # read until we have a full array (which we know ends with a
        # close bracket). it is very unlikely we'll need to do multiple
        # reads between clearing the buffer, since i3status prints one
        # array per line, but if some other compatible program outputs
        # pretty-printed JSON it's possible.

        buf = bytearray()
        while i3status.returncode is None:
            buf += await i3status.stdout.readuntil(b"]")
            try:
                s = buf.decode("utf-8").strip("\n,")
                self.status = json.loads(s)
                await self.print_status()
                buf.clear()
            except json.decoder.JSONDecodeError:
                pass


async def main():
    i3status_argv = sys.argv[1:] or ["i3status"]
    focus = i3Bifocals()
    tasks = await asyncio.gather(focus.subscribe_i3_events(), focus.exec_i3status(i3status_argv))


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        sys.exit(0)
